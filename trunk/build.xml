<project default="all">
	<!-- You can change properties according to our project layout. 
		However, this default is recommended and 
		makes your tutor's life a lot easier. -->
	<property name="src-dir" location="./src" />
	<property name="bin-dir" location="./bin" />
	<property name="lib-dir" location="./lib" />
	<property name="dist-dir" location="./build" />
	<property name="junit-jar" location="./lib/junit-4.9b2.jar" />
	<property name="checkstyle-jar" location="./checkstyle-5.3-all.jar" />
	<property name="checkstyle-config" location="./checkstyle_config.xml" />

	<!-- Please change the "properties" variable according
	 to the current exercise sheet. You can set it from the command line
	 via -Dproperties=<xxx>, e.g. -Dproperties=demo. This expects a file
	 named <xxx>.properties to exist. 
	 See demo.properties for required variables -->
	<property name="properties" value="cj48-va6" />
	<property file="${properties}.properties"/>
	<property name="Main-Class" value="routeplanning.MainClass"/>
	<property name="manifest-file" value="${src-dir}/MANIFEST.MF"/>
	
	
	<!-- If you use third party libraries, you'll have to modify the classpath. -->
	
	<path id="classpath.base">
		<fileset dir="${lib-dir}" includes="**/*.jar"/>
	</path>
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--  Ideally, you'll never have to touch anything below.  -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	
	<path id="classpath.test">
		<pathelement location="${junit-jar}" />
		<pathelement location="${bin-dir}" />
		<path refid="classpath.base" />
	</path>
	
	<path id="classpath.run">
			<pathelement location="${bin-dir}" />
			<path refid="classpath.base" />
		</path>

	<target name="checkstyle">
		<taskdef resource="checkstyletask.properties"
                         classpath="${checkstyle-jar}"/>
		<checkstyle config = "${checkstyle-config}"
                      failOnViolation="false" >
			<fileset dir="${src-dir}" includes="*/*.java"/>
			<formatter type="plain" usefile="false"/>
		</checkstyle>
	</target>

	<target name="compile">
		<javac srcdir="${src-dir}" destdir="${bin-dir}"
			verbose="false" includeantruntime="false">
			<classpath refid="classpath.test" />
		</javac>
	</target>

	<!-- Please note: This is no ideal "jar" target since it does not exclude 
		test-classed. It could easily be done by splitting normal source 
		and test source folders or by using naming conventions and "exclude".
		But we want to avoid  any trouble for you that would be caused
		by multiple source folders or if a non-test-class ends on "...Test" --> 
	<target name="jar" depends="compile">
		<jar destfile="${dist-dir}/erp.jar" basedir="${bin-dir}">
			<manifest>
				<attribute name="Main-Class" value="${Main-Class}" />
			</manifest>
		</jar>
		
	    <!-- Place all jars into erp.jar -->
	    <jar jarfile="${dist-dir}/erp.jar" basedir="${bin-dir}" manifest="${manifest-file}">
	    	<zipgroupfileset dir="${lib-dir}" includes="**/*.jar" />
		</jar>
	</target>

	<target name="clean">
		<delete verbose="true">
			<fileset dir="${bin-dir}" includes="**/*.class" />
			<fileset dir="${dist-dir}" includes="${jar-name}.jar" />
		</delete>
	</target>	
	
	<target name="test" depends="compile">
		<junit>
			<classpath refid="classpath.test" />
			<batchtest fork="yes">
				<formatter type="plain" usefile="false"/>
				<fileset dir="${src-dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="all" depends="test, checkstyle, jar" />
</project>
